(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{749:function(s,t,e){"use strict";e.r(t);var a=e(108),r=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"框架高级启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#框架高级启动"}},[s._v("#")]),s._v(" 框架高级启动")]),s._v(" "),e("h2",{attrs:{id:"框架下载方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#框架下载方式"}},[s._v("#")]),s._v(" 框架下载方式")]),s._v(" "),e("p",[s._v("从前面的几章中，我们了解到框架有多种下载到本地的方式。")]),s._v(" "),e("ul",[e("li",[s._v("Composer 依赖模式")]),s._v(" "),e("li",[s._v("Starter 从模板创建模式（等同于 Composer 模式）")]),s._v(" "),e("li",[s._v("源码模式")]),s._v(" "),e("li",[s._v("Phar Composer 依赖模式")]),s._v(" "),e("li",[s._v("Phar 源码模式")])]),s._v(" "),e("h3",{attrs:{id:"composer-依赖模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#composer-依赖模式"}},[s._v("#")]),s._v(" Composer 依赖模式")]),s._v(" "),e("p",[s._v("从 Composer 依赖加载框架是一种拉取框架的方式，这种方式的优点在于，你可以直观地感受到是如何使用框架从零开始一个完整的项目的过程。")]),s._v(" "),e("p",[s._v("从 Composer 依赖的启动步骤：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" my-bot "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 新建一个空的文件夹")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" my-bot/\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" require zhamao/framework "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从 composer 拉取后会自动部署 autoload 和 composer.json 等内容")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用命令初始化框架")]),s._v("\nvendor/bin/start init\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动框架")]),s._v("\nvendor/bin/start server\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("注意：使用 "),e("code",[s._v("init")]),s._v(" 命令时，会给当前目录解压以下文件：")]),s._v(" "),e("div",{staticClass:"language-php line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$extract_files")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[s._v('"/config/global.php"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\t\t\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 全局配置文件")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[s._v('"/.gitignore"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\t\t\t\t\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// git 排除文件")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[s._v('"/config/file_header.json"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\t\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// HTTP 文件头")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[s._v('"/config/console_color.json"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 终端颜色主题文件")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[s._v('"/config/motd.txt"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\t\t\t\t\t\t\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 框架启动时自定义的 motd")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[s._v('"/src/Module/Example/Hello.php"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\t\t\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 框架自带的示例模块")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[s._v('"/src/Module/Middleware/TimerMiddleware.php"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 框架自带的函数运行时间监控中间件")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[s._v('"/src/Custom/global_function.php"')]),s._v("\t\t\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 用户可在这里自定义编写自己的全局函数")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("经过 init 解压这些文件后，你的框架就能正常运行且开始编写代码了！")]),s._v(" "),e("h3",{attrs:{id:"starter-模板模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#starter-模板模式"}},[s._v("#")]),s._v(" Starter 模板模式")]),s._v(" "),e("p",[s._v("从模板新建其实原理和 Composer 依赖模式完全一样，只不过，这个过程是使用模板仓库新建的项目，使用 Composer 自带的 "),e("code",[s._v("create-project")]),s._v(" 方式创建的。starter 也是一个 GitHub 项目，见 "),e("a",{attrs:{href:"https://github.com/zhamao-robot/zhamao-framework-starter",target:"_blank",rel:"noopener noreferrer"}},[s._v("地址"),e("OutboundLink")],1),s._v("。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" create-project zhamao/framework-starter my-bot/ "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# my-bot 是你自定义的文件夹名称，和上方相同")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" my-bot\nvendor/bin/start server "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动框架")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("Starter 模式相当于直接从 GitHub 拉取 "),e("code",[s._v("zhamao-framework-starter")]),s._v(" 项目，然后执行 "),e("code",[s._v("composer update")]),s._v("。")]),s._v(" "),e("p",[s._v("那和 Composer 依赖模式有什么区别呢？没区别！构建出来的框架和文件是一模一样的！使用 Composer 依赖模式，使用 "),e("code",[s._v("init")]),s._v(" 命令后，文件会和 "),e("code",[s._v("zhamao-framework-starter")]),s._v(" 仓库拉取回来的模板一模一样！（或者换句话说，这个仓库就是使用 "),e("code",[s._v("init")]),s._v(" 命令生成的文件的）")]),s._v(" "),e("p",[s._v("那使用哪种好呢？看你自己！如果你想给你自己的已有项目套上炸毛框架，那么就推荐使用 Composer 依赖模式，如果是从 0 开始编写框架模块，则推荐使用模板模式。")]),s._v(" "),e("h3",{attrs:{id:"源码模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源码模式"}},[s._v("#")]),s._v(" 源码模式")]),s._v(" "),e("p",[s._v("源码模式和以上两种方案都不一样，源码模式允许你对框架本身进行一系列修改，框架本体就可以直接运行。")]),s._v(" "),e("p",[s._v("Composer 依赖模式（以及模板模式）和源码模式的区别是：")]),s._v(" "),e("ul",[e("li",[s._v("依赖模式和模板模式是通过 library 方式引入框架的，框架本身会放在 composer 的 "),e("code",[s._v("vendor/")]),s._v(" 目录下，从 composer 引入的 library 相当于子集，vendor 目录下的文件最好不要手动修改（应该都知道吧），所以框架本身也只是加载了进来。")]),s._v(" "),e("li",[s._v("源码模式相当于直接从框架源码目录运行框架和模块，框架源码都在 "),e("code",[s._v("src/ZM")]),s._v(" 目录下，默认的示例模块都在 "),e("code",[s._v("src/Module")]),s._v(" 下，是同级目录。而此时的 "),e("code",[s._v("vendor/")]),s._v(" 目录只包含了框架依赖的外部组件，例如注解解析器和 psysh 等。")])]),s._v(" "),e("p",[s._v("源码模式可以方便地调试和修改框架本身，拉取方式很简单，用 "),e("code",[s._v("git clone")]),s._v(" 或从 GitHub 下载最新版的源码包解压即可。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone https://github.com/zhamao-robot/zhamao-framework.git\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" zhamao-framework/\nbin/start server "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一次运行时会提示一个“框架源码模式需要在autoload文件中添加Module目录为自动加载”")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" update "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 更新 autoload 文件，应用刚才上一步添加的 `src/Module` 文件夹下的模块自动加载")]),s._v("\nbin/start server "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过源码模式启动框架")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h2",{attrs:{id:"框架启动参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#框架启动参数"}},[s._v("#")]),s._v(" 框架启动参数")]),s._v(" "),e("p",[s._v("框架启动时可以根据实际情况指定启动参数。")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("--debug-mode")]),s._v("：启用调试模式，调试模式的作用是关闭一键协程化和终端交互，减少 Swoole 本身对代码逻辑的干扰（比如执行 "),e("code",[s._v("shell_exec()")]),s._v(" 报错的话可以开启这个进行调试）。")]),s._v(" "),e("li",[e("code",[s._v("--log-{mode}")]),s._v("：设置 log 等级。支持 "),e("code",[s._v("--log-debug")]),s._v("，"),e("code",[s._v("--log-verbose")]),s._v("，"),e("code",[s._v("--log-info")]),s._v("，"),e("code",[s._v("--log-warning")]),s._v("，"),e("code",[s._v("--log-error")]),s._v("。")]),s._v(" "),e("li",[e("code",[s._v("--log-theme")]),s._v("：设置终端信息的主题。这个选项适用于多种终端信息显示的兼容，例如白色终端和不支持颜色的终端。详见 "),e("RouterLink",{attrs:{to:"/component/console/#_2"}},[s._v("Console - 主题设置")]),s._v("。")],1),s._v(" "),e("li",[e("code",[s._v("--disable-coroutine")]),s._v("：关闭一键协程化。")]),s._v(" "),e("li",[e("code",[s._v("--remote-terminal")]),s._v("：开启 nc 远程终端，配置文件使用全局中的 "),e("code",[s._v("remote_terminal")]),s._v(" 项。也可以在全局配置中常开启（status 设置为 true）。")]),s._v(" "),e("li",[e("code",[s._v("--daemon")]),s._v("：以守护进程方式运行框架，此参数将直接在输出 motd 后将进程挂到 init 下运行，后台常驻。")]),s._v(" "),e("li",[e("code",[s._v("--watch")]),s._v("：监控 "),e("code",[s._v("src/")]),s._v(" 目录下的文件变化，有变化则自动重新载入代码。开启监控需要安装 PHP 扩展：inotify。使用 pecl 就可以安装："),e("code",[s._v("pecl install inotify")]),s._v("。（注：不支持 WSL 和 macOS）")]),s._v(" "),e("li",[e("code",[s._v("--env")]),s._v("：设置运行环境，设置运行环境后将优先加载指定环境的配置文件，支持 "),e("code",[s._v("--env=production")]),s._v("，"),e("code",[s._v("--env=staging")]),s._v("，"),e("code",[s._v("--env=development")]),s._v("，见 "),e("RouterLink",{attrs:{to:"/guide/basic-config/#_2"}},[s._v("基本配置")]),s._v("。")],1),s._v(" "),e("li",[e("code",[s._v("--worker-num")]),s._v("：指定运行的工作进程数量（并不是越多越好，框架默认为 CPU 核心数），例如 "),e("code",[s._v("--worker-num=8")]),s._v("。")]),s._v(" "),e("li",[e("code",[s._v("--task-worker-num")]),s._v("：启用 TaskWorker 进程并指定数量。")]),s._v(" "),e("li",[e("code",[s._v("--show-php-ver")]),s._v("：在启动时显示 Swoole 和 PHP 的版本。")])]),s._v(" "),e("h2",{attrs:{id:"守护进程操作命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#守护进程操作命令"}},[s._v("#")]),s._v(" 守护进程操作命令")]),s._v(" "),e("p",[s._v("守护进程在 2.2.0 版本开始，可以使用命令行快速操作，如重启、停止、查看状态等。")]),s._v(" "),e("p",[s._v("注意，这里的守护进程操作命令是指 "),e("strong",[s._v("使用 "),e("code",[s._v("--daemon")]),s._v(" 方式启动的框架")]),s._v("，如使用 Docker、screen、tmux、systemd 等方式挂后台跑则此命令不可用！")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("vendor/bin/start daemon:status "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看守护进程的状态")]),s._v("\nvendor/bin/start daemon:reload "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重载框架")]),s._v("\nvendor/bin/start daemon:stop "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止运行守护进程的框架")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h2",{attrs:{id:"独立启动其他组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#独立启动其他组件"}},[s._v("#")]),s._v(" 独立启动其他组件")]),s._v(" "),e("p",[s._v("框架默认不止启动框架的 "),e("code",[s._v("server")]),s._v(" 命令，还有 "),e("code",[s._v("init")]),s._v(" 命令和 "),e("code",[s._v("simple-http-server")]),s._v(" 命令。"),e("code",[s._v("init")]),s._v(" 命令在上方 Composer 依赖模式中提到过，就是初始化各个文件的。")]),s._v(" "),e("h3",{attrs:{id:"独立-http-文件服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#独立-http-文件服务器"}},[s._v("#")]),s._v(" 独立 HTTP 文件服务器")]),s._v(" "),e("p",[s._v("如果你只需要一个静态文件服务器，类似 Nginx，那么框架也支持。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("vendor/bin/start simple-http-server your-web-dir/ --host"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0 --port"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("code",[s._v("your-web-dir")]),s._v(" 是必填的参数。")]),s._v(" "),e("li",[e("code",[s._v("--host")]),s._v(" 和 "),e("code",[s._v("--port")]),s._v(" 是可选参数，如果不填，则默认使用 "),e("code",[s._v("global.php")]),s._v(" 配置文件中的配置。")])]),s._v(" "),e("h3",{attrs:{id:"检查配置是否更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#检查配置是否更新"}},[s._v("#")]),s._v(" 检查配置是否更新")]),s._v(" "),e("p",[s._v("默认情况下（非源码模式），你可以使用命令 "),e("code",[s._v("vendor/bin/start check:config")]),s._v(" 来检查你的配置文件是否需要更新部分段落。")]),s._v(" "),e("h3",{attrs:{id:"systemd-配置文件生成器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#systemd-配置文件生成器"}},[s._v("#")]),s._v(" systemd 配置文件生成器")]),s._v(" "),e("p",[s._v("框架支持生成 systemd 配置文件 "),e("code",[s._v("zhamao.service")]),s._v("，生成后将文件放入 "),e("code",[s._v("/etc/systemd/system")]),s._v(" 后输入 "),e("code",[s._v("systemctl enable zhamao.service")]),s._v(" 即可。")]),s._v(" "),e("p",[s._v("命令："),e("code",[s._v("vendor/bin/start systemd:generate")])]),s._v(" "),e("p",[s._v("注意，systemd 启动的守护进程模式和使用参数 "),e("code",[s._v("--daemon")]),s._v(" 不一样，请勿同时混用，直接使用上述命令生成的配置文件即可正常使用！")])])}),[],!1,null,null,null);t.default=r.exports}}]);