(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{791:function(s,t,a){"use strict";a.r(t);var n=a(108),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"事件和注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件和注解"}},[s._v("#")]),s._v(" 事件和注解")]),s._v(" "),a("h2",{attrs:{id:"注解事件概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注解事件概念"}},[s._v("#")]),s._v(" 注解事件概念")]),s._v(" "),a("p",[s._v("我们知道事件，是一个底层的 event loop 收到消息后调用对应的各类方法的一个模型，比如给机器人发送消息后框架要做的就是指定到一个你定义的函数上，处理你的业务逻辑代码。比如在默认模块中，提供了 "),a("strong",[s._v("你好")]),s._v(" 的回复："),a("strong",[s._v("你好啊，我是由炸毛框架构建的机器人！")]),s._v("。这项简单回复的任务就是一个事件的触发到响应的全过程。")]),s._v(" "),a("p",[a("strong",[s._v("注解")]),s._v("（Annotation）又称标注，Java 最早在 2004 年的 JDK 5 中引入的一种注释机制。目前 PHP 官方版本并未提供内置元注解和注解概念，但我们通过 "),a("code",[s._v("ReflectionClass")]),s._v(" 反射类解析 PHP 代码注释从而实现了自己的一套注解机制。如果你没有写过 Java，并且不了解注解是什么，你可以理解为对 function 或 class 的一个修饰，因为传统的 PHP 代码逻辑我们都知道，不能简单给原先存在的函数贴标签，就比如，你不能在原本的 PHP 代码中给函数贴上一个可以影响它一生并且改变它行为的标签，而有了注解，就相当于有了给函数贴标签的机会。")]),s._v(" "),a("p",[s._v("在常见框架如 Spring，Swoft 等代码结构里面，注解更是其核心的存在。")]),s._v(" "),a("p",[s._v("在炸毛框架中，我们所有事件的绑定均采用这一方式进行调用模块内各个方法。包括 Swoole 自身的框架启动事件、WebSocket 连接握手事件、HTTP 请求事件等等，也包括 CQHTTP 发来的事件，如"),a("code",[s._v("message")]),s._v("，"),a("code",[s._v("notice")]),s._v("，"),a("code",[s._v("request")]),s._v(" 等。")]),s._v(" "),a("h2",{attrs:{id:"如何使用注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用注解"}},[s._v("#")]),s._v(" 如何使用注解")]),s._v(" "),a("p",[s._v("就像我们日常开发写注释一样，只需在类、方法或成员变量上方按规则添加注释即可，这里以默认自带的 "),a("code",[s._v("Hello")]),s._v(" 模块类为例子：")]),s._v(" "),a("div",{staticClass:"language-php line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token php language-php"}},[a("span",{pre:!0,attrs:{class:"token delimiter important"}},[s._v("<?php")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token package"}},[s._v("Module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("Example")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token package"}},[s._v("ZM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("Annotation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("CQ"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("CQCommand")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[s._v("Hello")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/**\n     * @CQCommand(match="你好")\n     * @return string\n     */')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[s._v('"你好啊，我是由炸毛框架构建的机器人！"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("其中 "),a("code",[s._v("@CQCommand()")]),s._v(" 就是一个基本的注解应用。注意需引入相关注解（Annotation）类，"),a("strong",[s._v("且必须")]),s._v(" 以 "),a("code",[s._v("/**")]),s._v(" 开始并以 "),a("code",[s._v("*/")]),s._v(" 结束，否则会导致无法解析！上方 "),a("code",[s._v("@return")]),s._v(" 为 IDE 自动生成的 PHPDoc，不需要管。")]),s._v(" "),a("p",[s._v("有什么用？大有妙用！这个例子内注解类的用途是收到 QQ 消息后如果消息第一个词匹配到 "),a("code",[s._v("你好")]),s._v(" 的话，框架就会自动处理，最终执行调用此 "),a("code",[s._v("hello()")]),s._v(" 方法。注意 "),a("code",[s._v("CQCommand")]),s._v(" 和其他任何后面讲到的注解类一样，需先 "),a("code",[s._v("use ZM\\Annotation\\")]),s._v(" 下的对应注解类，否则也不能正常使用。")]),s._v(" "),a("h3",{attrs:{id:"基本语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[s._v("#")]),s._v(" 基本语法")]),s._v(" "),a("p",[s._v("先 use！先 use！先 use！重要的事情说三遍！"),a("code",[s._v("use ZM\\Annotation\\xxxx;")])]),s._v(" "),a("p",[a("strong",[s._v("必须")]),s._v(" 以 "),a("code",[s._v("/**")]),s._v(" 开始并以 "),a("code",[s._v("*/")]),s._v(" 结束。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@注解类名(参数名1="参数1的值"[,参数名2="参数2的值"])\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("对于只使用或只有一个参数的注解类，"),a("code",[s._v('@注解类名("参数的值")')]),s._v(" 可以省略参数名。")]),s._v(" "),a("p",[s._v("对于没有参数的注解类，"),a("code",[s._v("@参数名()")]),s._v(" 直接使用即可。")]),s._v(" "),a("h2",{attrs:{id:"注解和事件的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注解和事件的关系"}},[s._v("#")]),s._v(" 注解和事件的关系")]),s._v(" "),a("p",[s._v("在炸毛框架里，注解常常被当作事件分发的一个重要角色，但注解本身又不是事件，更恰当的说，是注解代表了事件。")]),s._v(" "),a("p",[s._v("机器人开发过程中常见的 "),a("code",[s._v("@CQCommand")]),s._v("，或者是 HTTP 服务器路由绑定 "),a("code",[s._v("@RequestMapping")]),s._v(" 都是相当于由对应注解代表了事件，而 "),a("code",[s._v("@Middleware")]),s._v("，"),a("code",[s._v("@Closed")]),s._v(" 等这类注解显然不代表任何事件，只能当作这个函数或类的修饰属性而已。代表了事件的注解，我们称之为"),a("strong",[s._v("注解事件")]),s._v("，它会在某种事件达成条件后触发注解下方的函数本身。")]),s._v(" "),a("p",[s._v("值得注意的是，注解事件本身概念是我凭空捏造的，我不好解释所以只能创造这么一个词来代指这一抽象的概念，硬要解释的话，大致就好比一个社区里有一个卖牛奶的，有几家人订阅了每日上门送牛奶的服务，只要你打了“给我配送牛奶”的注解，他就会上门。而它送的不止一种奶，可以给你个性化定制，比如让卖牛奶的给你带包糖带瓶水，而描述这个的注解就只能做一个之前注解的修饰。假设你只写了带包糖的注解，没有写给我配送牛奶的注解，那他永远也不会给你送牛奶和糖过来。")]),s._v(" "),a("h2",{attrs:{id:"阻断事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻断事件"}},[s._v("#")]),s._v(" 阻断事件")]),s._v(" "),a("p",[s._v("由于炸毛框架内的注解事件统一由一个通用的事件分发器进行分发，所以你在任何注解事件内都可以用通用的方式阻断当前正在运行的事件。")]),s._v(" "),a("p",[s._v("首先就是要记得先 use 事件分发器的类："),a("code",[s._v("use ZM\\Event\\EventDispatcher;")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-php line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name static-context"}},[s._v("EventDispatcher")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("interrupt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name static-context"}},[s._v("EventDispatcher")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("interrupt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 也可以带返回值，自定义注解事件时有用。")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);